{"version":3,"sources":["RhymeFinder.js","index.js"],"names":["RhymeFinder","props","uid","wordInputRef","createRef","useState","items","setItems","titleLine","setTitleLine","savedWords","setSavedWords","addRhymes","results","word","length","local_array","tmp_rlt","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","groupBy","syl_idx","idx","newItem","text","syl","type","id","Item","onClick","newSavedWords","concat","Set","SavedWords","prevones","slice","lastone","localString","substring","class","TextBar","placeholder","ref","TextDisplay","ListDisplay","ret","prevIdx","sylTitleStyle","item","style","callback","current","value","fetch","URLSearchParams","rel_rhy","toString","then","response","json","data","err","console","error","addSynoyms","ml","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e710be2b.chunk.js","sourcesContent":["import { useState, createRef} from \"react\";\n\nfunction RhymeFinder (props) {\n    let uid = 0;\n    const wordInputRef = createRef();\n    const [items, setItems] = useState([]);\n    const [titleLine, setTitleLine] = useState(\"\");\n    const [savedWords, setSavedWords] = useState([]);\n    \n\n    /* \n    * \n    * Functions\n    *  \n    */\n\n    function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n    \n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n    \n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n    function getRhymes(rel_rhy, callback) {\n        fetch(`https://api.datamuse.com/words?${(new URLSearchParams({rel_rhy})).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n                callback(data);\n            }, (err) => {\n                console.error(err);\n            });\n    }\n\n    function addRhymes(results, word) {\n        if (results.length === 0) {\n            setTitleLine(\"No result\");\n            setItems([]);\n            return;\n        }\n        setTitleLine(\"Words that rhyme with \" + word);\n        let local_array = [];\n        let tmp_rlt = groupBy(results, 'numSyllables');\n        for (let syl_idx in tmp_rlt) {\n            for (let idx in tmp_rlt[syl_idx]) {\n                const newItem = {\n                    text: tmp_rlt[syl_idx][idx].word,\n                    syl: syl_idx,\n                    type: \"Rhymes\",\n                    id: uid++\n                };\n                local_array.push(newItem);\n            }\n        }\n        \n        setItems(local_array);\n    }\n\n    function getSynoyms(ml, callback) {\n        fetch(`https://api.datamuse.com/words?${(new URLSearchParams({ml})).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n                callback(data);\n            }, (err) => {\n                console.error(err);\n            });\n    }\n\n    function addSynoyms(results, word) {\n        if (results.length === 0) {\n            setTitleLine(\"No result\");\n            setItems([]);\n            return;\n        }\n        setTitleLine(\"Words with a similar meaning to \" + word);\n        let local_array = [];\n        for (let result of results) {\n            const newItem = {\n                text: result.word,\n                type: \"Synoyms\",\n                id: uid++\n            };\n            local_array.push(newItem);\n        }\n        \n        setItems(local_array);\n    }\n\n    function onFindRhymes () {\n        let word = wordInputRef.current.value;\n        setTitleLine(\"...loading\");\n        getRhymes(word, (results) => {\n            addRhymes(results, word);\n        });\n    }\n\n    function onFindSynoyms () {\n        let word = wordInputRef.current.value;\n        setTitleLine(\"...loading\");\n        getSynoyms(word, (results) => {\n            addSynoyms(results, word);\n        });\n    }\n\n\n    /* \n    * \n    * Components\n    *  \n    */\n\n    function Item (props) {\n        function saveItem() {\n            let newSavedWords;\n            newSavedWords = savedWords.concat(props.text + \", \");\n            setSavedWords(Array.from(new Set(newSavedWords)));\n        }\n        return <li>{props.text} <button onClick={saveItem}>save</button></li>;\n    }\n\n    function SavedWords () {\n        let prevones = savedWords.slice(0, -1);\n        let lastone = \"\";\n        if (savedWords.length !== 0) {\n            let localString = savedWords[savedWords.length - 1]\n            lastone = localString.substring(0, localString.length - 2);\n        }\n        prevones = prevones.concat(lastone);\n        return <div class=\"col\">Saved words: <span>{prevones}</span></div>\n    }\n\n    function TextBar () {\n        return <>\n            <input class=\"form-control\" type=\"text\" placeholder=\"Enter a word\" id=\"word_input\" ref={wordInputRef} />\n        </>;\n    }\n\n    function TextDisplay () {\n        return <p>{titleLine}</p>;\n    }\n\n    function ListDisplay () {\n        let ret = [];\n        let prevIdx = 0;\n        const sylTitleStyle = {\n            \"font-size\": \"20px\",\n            \"margin\": \"10px 0\",\n            \"font-weight\": \"bold\"\n        }\n        for (let item of items) {\n            if (item.type === \"Rhymes\" && item.syl !== prevIdx) {\n                prevIdx = item.syl;\n                ret.push(<>\n                    <div style={sylTitleStyle}> {item.syl} syllable{item.syl===\"1\"?\"\":\"s\"} </div>\n                    <Item key={item.id} text={item.text} />\n                </>);\n            }\n            else {\n                ret.push(<Item key={item.id} text={item.text} />);\n            }\n        }\n        return <ul>{ret}</ul>;\n    }\n\n    return <>\n        <SavedWords />\n        <TextBar />\n        <button id=\"show_rhymes\" type=\"button\" class=\"btn btn-primary\" onClick={onFindRhymes}>Show rhyming words</button>\n        <button id=\"show_synonyms\" type=\"button\" class=\"btn btn-secondary\" onClick={onFindSynoyms}>Show synonyms</button>\n        <TextDisplay />\n        <ListDisplay />\n    </>;\n\n\n}\n\nexport default RhymeFinder;","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport './index.css';\nimport RhymeFinder from './RhymeFinder';\n\nReactDOM.render(\n  <React.StrictMode>\n      <h1> React Rhyme Finder </h1>\n      <RhymeFinder />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}